{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","bankOne","keyCode","keyTrigger","id","url","DrumPadKey","props","state","playing","playSound","bind","handleKeyPress","document","addEventListener","this","removeEventListener","e","item","sound","getElementById","currentTime","play","updateDisplayID","setTimeout","class","onClick","src","React","Component","App","power","currentBank","currentBankId","currentID","sliderVolume","setDisplayID","setDrumPadVolume","setState","value","map","drumPad","type","min","max","step","onChange","orient","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4af6bd1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst bankOne = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Heater-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Heater-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Heater-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Heater-4',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Clap',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: \"Kick-n'-Hat\",\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n},\n];\n\nconst bankTwo = [{\nkeyCode: 81,\nkeyTrigger: 'Q',\nid: 'Chord-1',\nurl: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n}, {\nkeyCode: 87,\nkeyTrigger: 'W',\nid: 'Chord-2',\nurl: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n}, {\nkeyCode: 69,\nkeyTrigger: 'E',\nid: 'Chord-3',\nurl: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n}, {\nkeyCode: 65,\nkeyTrigger: 'A',\nid: 'Shaker',\nurl: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}, {\nkeyCode: 83,\nkeyTrigger: 'S',\nid: 'Open-HH',\nurl: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\nkeyCode: 68,\nkeyTrigger: 'D',\nid: 'Closed-HH',\nurl: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\nkeyCode: 90,\nkeyTrigger: 'Z',\nid: 'Punchy-Kick',\nurl: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\nkeyCode: 88,\nkeyTrigger: 'X',\nid: 'Side-Stick',\nurl: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\nkeyCode: 67,\nkeyTrigger: 'C',\nid: 'Snare',\nurl: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}];\n\nclass DrumPadKey extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      playing: false\n    }\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  componentDidMount(){\n    document.addEventListener('keydown',this.handleKeyPress)\n  }\n  componentWillUnmount(){\n    document.removeEventListener('keydown',this.handleKeyPress)\n  }\n  handleKeyPress(e){\n    if(e.keyCode === this.props.item.keyCode){\n      this.playSound();\n    }\n  }\n  playSound(e){\n    const sound = document.getElementById(this.props.item.keyTrigger);\n    sound.currentTime = 0;\n    sound.play();\n    this.props.updateDisplayID(this.props.item.id)\n    setTimeout(()=>{this.props.updateDisplayID('Press Key to Start')},1000);\n  }\n\n  render(){\n    return(\n      <div class=\"p-2 col-sm-4\">\n        <button class=\"drum-pad btn btn-dark\" id={this.props.item.id} onClick={this.playSound}>\n            <h3>{this.props.item.keyTrigger}</h3>\n            <audio id={this.props.item.keyTrigger} class=\"clip\" src={this.props.item.url}></audio>\n        </button>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      power: false,\n      currentBank: bankOne,\n      currentBankId: 'Heater Kit',\n      currentID: 'Press Key to Start',\n      sliderVolume: 0.5\n    }\n    this.setDisplayID = this.setDisplayID.bind(this)  \n    this.setDrumPadVolume = this.setDrumPadVolume.bind(this)  \n  }\n    setDisplayID(id){\n      this.setState({\n        currentID: id\n      })\n    }\n    setDrumPadVolume(){\n      this.setState({\n        sliderVolume: document.getElementById(\"volume\").value\n      })\n    }\n    render(){\n      return (\n        <div id=\"drum-machine\" class=\"col-6 d-flex p-4\">\n          <div id=\"display\" class=\"col-10\">\n              {this.state.currentID}\n            <div id=\"displayedText\" class=\"d-flex fluid p-2 mb-2 justify-content-center\">\n              {this.state.currentID}\n            </div>\n            <div class=\"row\">\n                {this.state.currentBank.map((drumPad)=><DrumPadKey item={drumPad} updateDisplayID={this.setDisplayID}/>)}\n            </div>\n          </div>\n          <div class=\"col-2 d-flex flex-column align-items-center ml-3 pr-0\">\n            <input id=\"volume\" type=\"range\" value={this.state.sliderVolume} min=\"0\" max=\"1\" step=\"0.01\" class=\"form-control-range\" onChange={this.setDrumPadVolume} orient=\"vertical\"></input>\n            <label>Adjust<br/>Volume</label>\n          </div>\n        </div>\n      )\n    }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}